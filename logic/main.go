package main

import (
	"github.com/gin-gonic/contrib/static"
	"github.com/gin-gonic/gin"
	"html/template"
	"net/http"
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
    swaggerFiles "github.com/swaggo/files" // swagger embed files
	_ "github.com/zdtsw/Gobra/docs" // docs is generated by Swag CLI, you have to import it.
)


// @title Swagger Gobra API
// @version beta 
// @description Swagger API doc for Gobra.
// @termsOfService http://swagger.io/terms/

// @contact.name Wen Zhou
// @contact.email ericchou19831101@msn.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8888
// @BasePath /api/v1

// global variable definitions
var (
	version string = "beta"
	author  string = "Wen Zhou"
	project string
	release bool
	// esIndex string = "bilbo"
	// r       *gin.Engine
)

type pageFiller struct {
	VersionPage   string
	ContactAuthor string
	EAProject     string
}

var render = pageFiller{
	VersionPage:   version,
	ContactAuthor: author,
	EAProject:     project,
}

func renderResponse(c *gin.Context, data gin.H, tmplFile string) {
	switch c.Request.Header.Get("Accept") {
	case "application/json":
		c.JSON(http.StatusOK, data["payload"])
	case "application/xml":
		c.XML(http.StatusOK, data["payload"])
	default:
		c.HTML(http.StatusOK, tmplFile, data)
	}
}

func errorHandler(err error) {
	//&(gin.Context).JSON(http.StatusBadRequest, gin.H{"Error: ": err})
	panic(err.Error())
}

// main function definition
func main() {

	if release {
		gin.SetMode(gin.ReleaseMode)
	}

	r := gin.Default()

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// register some functions
	r.SetFuncMap(template.FuncMap{
		"convertFileJSONResp": convertFileJSONResp,
		"showStatusIcon":      showStatusIcon,
	})

	r.LoadHTMLGlob("template/**/*.tmpl")
	r.Use(static.Serve("/img", static.LocalFile("./html/img", true)))
	// r.Use(static.Serve("/css", static.LocalFile("./html/css", true)))
	r.RedirectFixedPath = true
	r.RedirectTrailingSlash = true

	r.GET("/", showIndexPage)
	v1 := r.Group("/api/v1")
	{
		bilbo := v1.Group("/bilbo")
		{
			bilbo.GET("/health", healthBilboHandler)
			bilbo.GET("/create/:proj", createBilboHandler)
			bilbo.GET("/update/:proj", updateBilboHandler)
			bilbo.GET("/query/:proj", queryBilboHandler)
		}
		jenkins := v1.Group("/jenkins")
		{
			jenkins.GET("/info", projectInfoHandler)
			jenkins.GET("/project/:proj", jenkinsInstanceHandler)
		}
		k8s := v1.Group("/k8s")
		{
			k8s.GET("/list", listServiceHandler)
			k8s.GET("/action/:action", createServiceHandler)
		}
		aws := v1.Group("/aws")
		{
			aws.GET("/sum", AWSServiceHandler)
			aws.GET("/svc/:service", Dispatcher)
		}
	}

	r.Run(":8888")
}
